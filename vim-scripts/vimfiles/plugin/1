AlignMaps.vim:11:" The maps also set up marks 'y and 'z, and retain    region, execute same map.
AlignMaps.vim:66:nmap <silent> <script> <Plug>AlignMapsWrapperStart	:set lz<CR>:call <SID>WrapperStart()<CR>
AlignMaps.vim:79:  set ch=2
AlignMaps.vim:90:nmap <silent> <script> <Plug>AlignMapsWrapperEnd	:call <SID>WrapperEnd()<CR>:set nolz<CR>
AlignMaps.vim:95:  exe "set ch=".b:ch
AlignMaps.vim:120:map <silent> <Leader>afnc :set lz<CR>:silent call <SID>Afnc()<CR>:set nolz<CR>
AlignMaps.vim:226:  set ch=2
Align.vim:69:"   AlignCtrl style ..list.. : set alignment separators
Align.vim:175:  set noic
Align.vim:329:    "[-lrc+:] : set up s:AlignStyle
Align.vim:335:   "[<>|] : set up s:AlignSep
Align.vim:383:  set noic
Align.vim:450:  set et paste
Align.vim:459:   set noet
Align.vim:609:"	    call Decho(" set FieldSize_{".ifield."}=".FieldSize_{ifield}." <".field.">")
Align.vim:612:"	    call Decho("oset FieldSize_{".ifield."}=".FieldSize_{ifield}." <".field.">")
Align.vim:617:"	    call Decho(" set SepSize_{".ifield."}=".SepSize_{ifield}." <".field.">")
Align.vim:620:"	    call Decho("oset SepSize_{".ifield."}=".SepSize_{ifield}." <".field.">")
autodate.vim:1:" vi:set ts=8 sts=2 sw=2 tw=0:
autodate.vim:74:"   can be set by 'autodate_keyword_pre' and 'autodate_keyword_post'
autodate.vim:75:"   options, respectively.  If you set these values as below in your .vimrc:
a.vim:19:" setup the default set of alternate extensions. The user can override in thier
a.vim:20:" .vimrc if the defaults are not suitable. To override in a .vimrc simply set a
bufexplorer.vim:124:" set the mode to 'winmanager' for this buffer. this is to figure out how this
bufexplorer.vim:181:  set noinsertmode
bufexplorer.vim:184:  set noshowcmd
calendar.vim:48:"             if set calendar_monday, it can see that Sep 1st is Sat
calendar.vim:129:"       NOTE:you can set 'left', 'left-fit', 'right' for this option.
calendar.vim:136:"       NOTE:you can set 'top', 'bottom', 'both' for this option.
calendar.vim:157:"       set g:calendar_weeknm as below
calendar.vim:396:  " reset display variables
calendar.vim:410:    " set boundary of the month
casejump.vim:35:set cpo&vim
closeb.vim:41:" set s:sid script variable as suggested by vim documentation
closeb.vim:215:" use like this (statusline with only path): exec "set statusline=%{" . g:closeb_Pathfunc . "}"
closeb.vim:216:" or like this (default + path) :exec "set statusline=%<%f%h%m%r\\ %{" . g:closeb_Pathfunc . "}%=%l,%c%V\\ %P"
colormenu.vim:32:set cpo&vim
cream-sort.vim:128:		" fix back slashes if any (I use :set shellslash)
cscope_maps.vim:34:    set cscopetag
cscope_maps.vim:36:    " check cscope for definition of a symbol before checking ctags: set to 1
cscope_maps.vim:38:    set csto=0
cscope_maps.vim:49:    set cscopeverbose  
cscope_maps.vim:65:    " Below are three sets of the maps: one set that just jumps to your
cscope_maps.vim:122:    " (Note: you may wish to put a 'set splitright' in your .vimrc
cscope_maps.vim:141:    "set notimeout 
cscope_maps.vim:146:    "set timeoutlen=4000
cscope_maps.vim:148:    " Either way, since mapping timeout settings by default also set the
cscope_maps.vim:150:    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
cscope_maps.vim:154:    "set ttimeout 
cscope_maps.vim:158:    " connection, set it higher.  If you don't set ttimeoutlen, the value for
cscope_maps.vim:161:    "set ttimeoutlen=100
cvsmenu.vim:19:" global variables : may be set in ~/.vimrc	{{{1
cvsmenu.vim:276:  set nomodified
cvsmenu.vim:310:    \."\n\"\t\t\t\t  set environment var to cvsroot"
cvsmenu.vim:312:    \."\nlet $CVS_RSH\t\t= \'"			.$CVS_RSH."\'"			."\t\" set environment var to rsh/ssh"
cvsmenu.vim:313:    \."\nlet $CVSOPT\t\t= \'"			.$CVSOPT."\'"			."\t\" set cvs options (see cvs --help-options)"
cvsmenu.vim:314:    \."\nlet $CVSCMDOPT\t\t= \'"		.$CVSCMDOPT."\'"		."\t\" set cvs command options"
cvsmenu.vim:315:    \."\nlet $CVSCMD\t\t\= '"			.$CVSCMD."\'"			."\t\" set cvs command"
cvsmenu.vim:348:    map <buffer> <s-cr> :exec getline('.')<cr>:set nomod<cr>:echo getline('.')<cr>
cvsmenu.vim:350:    set syntax=vim
cvsmenu.vim:351:    set nomodified
cvsmenu.vim:419:  set nomodified
cvsmenu.vim:420:  set readonly
cvsmenu.vim:425:  set noreadonly
cvsmenu.vim:558:" set scope : file or directory, inform user
cvsmenu.vim:756:  set nowrap
cvsmenu.vim:757:  " reset single shot flag
cvsmenu.vim:958:  set syntax=diff
cvsmenu.vim:1554:  set nomodified
cvsmenu.vim:1655:    set nomodified
cvsmenu.vim:1825:  set modifiable
cvsmenu.vim:1944:    set nomodified
cvsmenu.vim:1980:  set nomodified
cvsmenu.vim:2001:    set nomodified
cvsmenu.vim:2123:" Autocommand : set title, restore diffmode		{{{1
cvsmenu.vim:2128:  " set/reset title
cvsmenu.vim:2231:" set title
favex.vim:15:" favex.vim requires Vim 6.0 (or later) run with at least "set nocompatible"
favex.vim:58:" (default is 'Explore'). For example, the favex window height can be set to 8
favex.vim:248:  " set favex_explore_cmd
favex.vim:254:  " set favex_win_height
FavMenu.vim:119:  vs $FAVOURITES|set nobl noro ma|0
filebrowser.vim:92:	set nomodified nomodifiable
filebrowser.vim:147:	set report=10000 noshowcmd
filebrowser.vim:149:" FB_ResetSilentSettings: reset settings set by FB_SetSilentSettings
filebrowser.vim:158:	" Turn off the swapfile, set the buffer type so that it won't get
f.vim:22:" :set backspace=indent,eol,start
f.vim:77::set foldenable
f.vim:78::set foldmethod=manual
f.vim:79::set foldminlines=0
f.vim:80::set foldtext=
grep.vim:74:" this is set to /usr/bin/grep. You can change this using the let command:
grep.vim:79:" this is set to /usr/bin/fgrep. You can change this using the let command:
grep.vim:84:" this is set to /usr/bin/egrep. You can change this using the let command:
grep.vim:89:" this is set to /usr/bin/agrep. You can change this using the let command:
grep.vim:94:" default, this is set to /usr/bin/find. You can change this using the let
grep.vim:100:" default, this is set to /usr/bin/xargs. You can change this using the let
grep.vim:108:" variable is set to '*'. You can specify multiple matching patterns separated
grep.vim:114:" the grep/fgrep/egrep/agrep utilities. By default, this is set to an empty
grep.vim:129:" then you can set the 'Grep_Find_Use_Xargs' variable to zero. If this is set
grep.vim:137:" is specified. For Unix systems, this is set to /dev/null and for MS-Windows
grep.vim:138:" systems, this is set to NUL. You can modify this by using the let command:
grep.vim:144:" systems, this is set to "'" and for MS-Window systems, this is set to an
grep.vim:151:" Unix systems, this is set to '\' and for MS-Window systems, this is set to
grep.vim:157:" while doing recursive searches. By default, this is set to 'RCS CVS SCCS'.
grep.vim:163:" doing recursive searches. By default, this is set to '*~ *,v s.*'. You can
grep.vim:304:    set efm=%f:%\\s%#%l:%m
grep.vim:582:" Define the set of grep commands
gzip.vim:19:  " set binary mode before reading the file
gzip.vim:59:  set pm=
gzip.vim:60:  " set 'modifiable'
gzip.vim:128:" vim: set sw=2 :
highlightline.vim:15:set cpo&vim
imaps.vim:24:" then a mapping is set up. However, there will be the following problems:
imaps.vim:71:" in the item, press <C-j> and you will be taken to the next set of <++>'s.
imaps.vim:143:" IMAP: set up a filetype specific mapping.
imaps.vim:382:" direction: flag for the search() function. If set to '', search forwards,
imaps.vim:434:	" reset @/ to this pattern so we do not create new highlighting.
imaps.vim:551:		" will reset @/ to this pattern so we do not create new highlighting.
imaps.vim:679:" (or using the raw 8-bit ASCII character in a file with 'fenc' set to
imaps.vim:680:" "latin1") if 'encoding' is set to utf-8, then text does not match itself:
libList.vim:10:" Description: libList.vim is a set of functions to work with lists or one
matchit.vim:47:set cpo&vim
matchit.vim:90:  set ve=
matchit.vim:108:  " First step:  if not already done, set the script variables
matchit.vim:149:  " Second step:  set the following local variables:
matchit.vim:168:  else	" Find the match that ends on or after the cursor and set curcol.
matchit.vim:196:  " Now, set group and groupBR to the matching group: 'if:endif' or
matchit.vim:636:  " First step:  if not already done, set the script variables
matchit.vim:734:"   " - TODO:  Change the s:all argument if there is a new set of match pats.
matchit.vim:742:"   " Now, set group and groupBR to the matching group: 'if:endif' or
MruMenu.vim:44:set cpo&vim
MruMenu.vim:56:let s:mru_hotkeys = 0	" set this to 1 if you want to have 0-9, A-Z as the hotkeys in the mru list, set to 0 for the default file name
mymaps.vim:4:"  <F2>            set diff            
mymaps.vim:5:"  <F3>            set nodiff          
mymaps.vim:52:map <F2>  :set diff<CR> 
mymaps.vim:53:map <F3>  :set nodiff<CR>
mymaps.vim:78:map <C-R> :cs reset <CR>
mymaps.vim:80:map <C-c> :set cmdheight=1 <CR>
mymenu.vim:8:      amenu My\ Men&u.\ Fo&lds.\ Manual :set fdm=manual <CR>
mymenu.vim:9:      amenu My\ Men&u.\ Fo&lds.\ Indent :set fdm=indent <CR>
mymenu.vim:10:      amenu My\ Men&u.\ Fo&lds.\ Expr   :set fdm=expr   <CR>
mymenu.vim:11:      amenu My\ Men&u.\ Fo&lds.\ Marker :set fdm=marker <CR>
mymenu.vim:12:      amenu My\ Men&u.\ Fo&lds.\ Syntax :set fdm=syntax <CR>
mymenu.vim:13:      amenu My\ Men&u.\ Fo&lds.\ Diff   :set fdm=diff   <CR>
myscripts.vim:50:" set mouseshape=n:60
myscripts.vim:51:set mouseshape=n:1
myscripts.vim:54:"set foldnestmax=2
myscripts.vim:58:"   set foldnestmax=1
myscripts.vim:59:"   set foldmethod=syntax
myscripts.vim:128:set ts=8
myscripts.vim:143:        exec "set diffopt=context:0"    
myscripts.vim:156:        set diffopt=context:4
myscripts.vim:165:        set nohls
myscripts.vim:167:        set hls
myscripts.vim:219:"map st :set tw=70<cr>v<S-}>gq<End>
myscripts.vim:273:":set ignorecase # you nearly always want this
myscripts.vim:370:":set incsearch : jumps to search word as you type (annoying but excellent)
myscripts.vim:371:":set wildignore=*.o,*.obj,*.bak,*.exe
myscripts.vim:372:":set shiftwidth=3
remoteOpen.vim:90:			" set a variable g:Remote_Server to indicate that this server
scratch.vim:49:	set isfname-=\
scratch.vim:50:	set isfname-=[
scratch.vim:63:    set buftype=nofile
scratch.vim:64:    set bufhidden=hide
scratch.vim:65:    set noswapfile
scratch.vim:66:    set noro
ShowFunc.vim:189:	set lazyredraw
ShowFunc.vim:196:    set grepformat&vim
ShowFunc.vim:197:    set grepprg&vim
ShowFunc.vim:233:	set nolazyredraw
SyntaxFolds.vim:17:"    startoff: this is the offset from the starting line at which folding will
SyntaxFolds.vim:19:"    endoff  : like startoff, but gives the offset of the actual fold end from
SyntaxFolds.vim:302:	let subset = s:Strntok(a:regions, '|', i)
SyntaxFolds.vim:303:	while subset != ''
SyntaxFolds.vim:310:		let subset = s:Strntok(a:regions, '|', i)
tagexplorer.vim:43:"    doesn't support changing the window width then set the TE_Adjust_Winwidth
tagexplorer.vim:120:" default, this is set to ctags. Set this variable to point to the location of
tagexplorer.vim:134:" set the 'TE_Include_File_Pattern' variable. If this variable is set to empty
tagexplorer.vim:137:" display only .c and .h files, set this variable to
tagexplorer.vim:141:" You can set the 'TE_Exclude_File_Pattern' variable to skip file names
tagexplorer.vim:143:" .bak, core and tags files, set this variable to
tagexplorer.vim:150:" can set the 'TE_Include_Dir_Pattern' variable. If this variable is set to
tagexplorer.vim:152:" You have to set this variable to a Vim regular expression pattern value.
tagexplorer.vim:158:" You can set the 'TE_Exclude_Dir_Pattern' variable to skip directories
tagexplorer.vim:166:" you prefer a horizontally split window, then set the 'TE_Use_Horiz_Window'
tagexplorer.vim:177:" set the TE_Use_Right_Window variable to one:
tagexplorer.vim:192:" width of the current window. If you set the 'TE_WinWidth' variable to a
tagexplorer.vim:198:" increased by the value set in the TE_WinWidth variable to accomodate the new
tagexplorer.vim:205:" MS-Windows version of Vim in a MS-DOS command window then you must set this
tagexplorer.vim:249:" side.  This setting is relevant only if TE_Use_Horiz_Window is set to
tagexplorer.vim:256:" specified by the TE_Include_File_Pattern option. If this option is set to
tagexplorer.vim:258:" is set to empty string.
tagexplorer.vim:265:" specified by the TE_Exclude_File_Pattern option. If this option is set to
tagexplorer.vim:275:" set to empty string, then all the directories will be displayed.  By
tagexplorer.vim:276:" default, this is set to empty string.
tagexplorer.vim:284:" set to empty string, then all the directories will be displayed. By default,
tagexplorer.vim:285:" this is set to empty string.
tagexplorer.vim:469:    set report=99999
tagexplorer.vim:690:    set report=99999
tagexplorer.vim:870:    set report=99999
tagexplorer.vim:1168:    let offset = line('.') - b:te_{a:fidx}_start - 
tagexplorer.vim:1170:    if offset == 0
tagexplorer.vim:1251:    set report=99999
tagexplorer.vim:1384:    let offset = line('.') - b:te_{idx}_start - 
tagexplorer.vim:1386:    if offset == 0
taglist.vim:71:"    doesn't support changing the window width then set the Tlist_Inc_Winwidth
taglist.vim:172:" winmanager plugin, set 'TagList' in the 'winManagerWindowLayout' variable.
taglist.vim:185:" By default, this is set to ctags. Set this variable to point to the location
taglist.vim:201:" you prefer a horizontally split window, then set the
taglist.vim:218:" the Tlist_Auto_Open variable to 1. By default, this variable is set to 0 and
taglist.vim:224:" you like to see tag prototypes instead of names, set the
taglist.vim:225:" Tlist_Display_Prototype variable to 1. By default, this variable is set to 0
taglist.vim:236:" width of the current window. If you set the 'Tlist_WinWidth' variable to a
taglist.vim:242:" value set in the Tlist_WinWidth variable to accommodate the new window.  The
taglist.vim:247:" prefer not to adjust the window width then set the 'Tlist_Inc_Winwidth'
taglist.vim:249:" MS-DOS command window then you must set this variable to 0, otherwise the
taglist.vim:256:" can set the Tlist_Use_SingleClick variable to one to jump to a tag when
taglist.vim:258:" is set to zero.
taglist.vim:262:" Due to a bug in Vim, if you set Tlist_Use_SingleClick to one and try to
taglist.vim:271:" don't need these information, you can set the Tlist_Compact_Format variable
taglist.vim:287:" To modify the support for an already supported language, you have to set the
taglist.vim:291:"               :set filetype
taglist.vim:293:" The format of the value set in the tlist_xxx_settings variable is
taglist.vim:308:" 'name' can be set to 'functions'.
taglist.vim:324:" To add support for a new language, set the tlist_xxx_settings variable
taglist.vim:349:" This setting is relevant only if Tlist_Use_Horiz_Window is set to zero (i.e.
taglist.vim:356:" MS-Windows version of Vim running in a MS-DOS window, this must be set to 0
taglist.vim:540:    " Skip buffers with 'buftype' set to nofile, nowrite, quickfix or help
taglist.vim:815:    set report=99999
taglist.vim:930:    " If the 'number' option is set in the source window, it will affect the
taglist.vim:1206:    set report=99999
taglist.vim:1486:    " Compute the offset into the displayed tags for the tag type
taglist.vim:1487:    let offset = lnum - b:tlist_{ftype}_{ttype}_start
taglist.vim:1488:    if offset == 0
taglist.vim:1781:    let offset = strpart(tag_txt, 0, stridx(tag_txt, ':')) + 0
tar-1.00.vim:1:" vim:set ts=4 sw=4 ai nobackup:
